// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { GetApiPostsData, GetApiPostsResponses, GetApiPostsByIdData, GetApiPostsByIdResponses, GetApiTagsData, GetApiTagsResponses, GetApiTagsByNameData, GetApiTagsByNameResponses, GetApiArchiveData, GetApiArchiveResponses, PostApiSendLoginLinkData, PostApiSendLoginLinkResponses, GetApiLoginData, GetApiLoginResponses, PostApiManagePostsData, PostApiManagePostsResponses, DeleteApiManagePostsByIdData, DeleteApiManagePostsByIdResponses, PutApiManagePostsByIdData, PutApiManagePostsByIdResponses, GetApiManageTagsData, GetApiManageTagsResponses } from './types.gen.ts';
import { client as _heyApiClient } from './client.gen.ts';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getApiPosts = <ThrowOnError extends boolean = false>(options: Options<GetApiPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPostsResponses, unknown, ThrowOnError>({
        url: '/api/posts',
        ...options
    });
};

export const getApiPostsById = <ThrowOnError extends boolean = false>(options: Options<GetApiPostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiPostsByIdResponses, unknown, ThrowOnError>({
        url: '/api/posts/{id}',
        ...options
    });
};

export const getApiTags = <ThrowOnError extends boolean = false>(options?: Options<GetApiTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTagsResponses, unknown, ThrowOnError>({
        url: '/api/tags',
        ...options
    });
};

export const getApiTagsByName = <ThrowOnError extends boolean = false>(options: Options<GetApiTagsByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTagsByNameResponses, unknown, ThrowOnError>({
        url: '/api/tags/{name}',
        ...options
    });
};

export const getApiArchive = <ThrowOnError extends boolean = false>(options?: Options<GetApiArchiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiArchiveResponses, unknown, ThrowOnError>({
        url: '/api/archive',
        ...options
    });
};

export const postApiSendLoginLink = <ThrowOnError extends boolean = false>(options: Options<PostApiSendLoginLinkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiSendLoginLinkResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/send-login-link',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const getApiLogin = <ThrowOnError extends boolean = false>(options: Options<GetApiLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiLoginResponses, unknown, ThrowOnError>({
        url: '/api/login',
        ...options
    });
};

export const postApiManagePosts = <ThrowOnError extends boolean = false>(options: Options<PostApiManagePostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiManagePostsResponses, unknown, ThrowOnError>({
        url: '/api/manage/posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiManagePostsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiManagePostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiManagePostsByIdResponses, unknown, ThrowOnError>({
        url: '/api/manage/posts/{id}',
        ...options
    });
};

export const putApiManagePostsById = <ThrowOnError extends boolean = false>(options: Options<PutApiManagePostsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiManagePostsByIdResponses, unknown, ThrowOnError>({
        url: '/api/manage/posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiManageTags = <ThrowOnError extends boolean = false>(options?: Options<GetApiManageTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiManageTagsResponses, unknown, ThrowOnError>({
        url: '/api/manage/tags',
        ...options
    });
};